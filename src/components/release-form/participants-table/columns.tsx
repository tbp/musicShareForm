'use client'

import React from 'react'
import { ColumnDef } from "@tanstack/react-table"
import { GripVertical, X } from "lucide-react"
import { Button } from "@/components/ui/button"
import { ParticipantAutocomplete } from "@/components/ui/participant-autocomplete"
import { SearchableSelect } from "@/components/ui/searchable-select"
import { NumberInput } from "@/components/ui/number-input"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { HelpCircle } from "lucide-react"
import { ArtistCredit } from "@/types/ddex-release"
import { PARTICIPANT_ROLES } from "@/constants/release-form"
import { DragHandleContext } from './data-table'


// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
export type ParticipantRow = ArtistCredit & {
  id: string
}

interface ParticipantActionsProps {
  participant: ParticipantRow
  index: number
  isLastMainArtist: boolean
  onUpdate: (index: number, field: string, value: any) => void
  onRemove: (index: number) => void
}

export const createColumns = ({ 
  onUpdate, 
  onRemove,
  onEdit
}: {
  onUpdate: (index: number, field: string, value: any) => void
  onRemove: (index: number) => void
  onEdit?: (index: number, participant: any) => void
}): ColumnDef<ParticipantRow>[] => [
  {
    id: "drag",
    header: "",
    cell: ({ row }) => {
      const dragHandle = React.useContext(DragHandleContext)
      
      return (
        <div 
          className="flex items-center justify-center cursor-grab active:cursor-grabbing h-14 px-2 touch-none select-none"
          {...dragHandle?.listeners}
          {...dragHandle?.attributes}
          style={{ touchAction: 'none' }}
        >
          <GripVertical className="h-4 w-4 text-muted-foreground hover:text-foreground transition-colors pointer-events-none" />
        </div>
      )
    },
    enableSorting: false,
    enableHiding: false,
    size: 40,
  },
  {
    accessorKey: "displayName",
    header: "–£—á–∞—Å—Ç–Ω–∏–∫",
    cell: ({ row, table }) => {
      const index = table.getRowModel().rows.findIndex(r => r.id === row.id)
      const participant = row.original
      
      // –°—Ç–∞–±–∏–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ —Ä–æ–ª–∏
      const RoleIcon = React.useMemo(() => {
        const roleInfo = PARTICIPANT_ROLES[participant.role as keyof typeof PARTICIPANT_ROLES]
        return roleInfo?.icon || null
      }, [participant.role])

      const handleUpdate = React.useCallback((value: string) => {
        onUpdate(index, 'displayName', value)
      }, [onUpdate]) // index –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è, —É–±–∏—Ä–∞–µ–º –∏–∑ dependencies

      return (
        <ParticipantAutocomplete
          icon={RoleIcon}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"
          value={participant.displayName}
          onChange={handleUpdate}
          onEditParticipant={onEdit ? React.useCallback((participant) => {
            onEdit(index, participant)
          }, [onEdit]) : undefined}
          showValidationError={true} // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
          className="h-10"
        />
      )
    },
    size: 200,
    enableResizing: false,
  },
  {
    accessorKey: "role",
    header: "–†–æ–ª—å",
    cell: ({ row, table }) => {
      const index = table.getRowModel().rows.findIndex(r => r.id === row.id)
      const participant = row.original
      // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const isLastMainArtist = participant.role === 'MainArtist' && 
        table.getRowModel().rows.filter(r => r.original.role === 'MainArtist').length === 1
      
      const roleOptions = Object.entries(PARTICIPANT_ROLES).map(([key, info]: [string, any]) => ({
        value: key,
        label: info.displayName
      }))

      return (
        <div title={isLastMainArtist ? "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è" : ""}>
          <SearchableSelect
            value={participant.role}
            onValueChange={(value) => onUpdate(index, 'role', value)}
            options={roleOptions}
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å"
            className=""
            disabled={isLastMainArtist}
          />
        </div>
      )
    },
  },
  {
    accessorKey: "copyrightShare",
    header: () => (
      <div className="flex items-center gap-2">
        –ê–≤—Ç–æ—Ä—Å–∫–∏–µ
        <Popover>
          <PopoverTrigger asChild>
            <button
              type="button"
              className="text-muted-foreground hover:text-foreground transition-colors p-0.5"
              aria-label="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∞–≤—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–∞–≤–∞–º"
            >
              <HelpCircle className="h-3 w-3" />
            </button>
          </PopoverTrigger>
          <PopoverContent className="w-80" side="top">
            <div className="space-y-3">
              <div className="font-medium text-foreground">
                –î–æ–ª—è –≤ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤–∞—Ö (Copyright)
              </div>
              <div className="text-sm text-muted-foreground space-y-2">
                <p>
                  <strong>–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–æ:</strong> –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–ª—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –¥–æ—Ö–æ–¥–∞—Ö –æ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ (—Å—Ç—Ä–∏–º–∏–Ω–≥, —Ä–∞–¥–∏–æ, –ø—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è).
                </p>
                <p>
                  <strong>–ú–æ–∂–Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å:</strong> –ï—Å–ª–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å —É—Å—Ç–Ω–æ.
                </p>
                <p className="text-xs text-muted-foreground/80">
                  üí° –°—É–º–º–∞ –¥–æ–ª–µ–π –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∏–¥–µ–∞–ª–µ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 100%
                </p>
              </div>
            </div>
          </PopoverContent>
        </Popover>
      </div>
    ),
    cell: ({ row, table }) => {
      const index = table.getRowModel().rows.findIndex(r => r.id === row.id)
      const participant = row.original

      return (
        <NumberInput
          placeholder="0"
          value={participant.copyrightShare || 0}
          onChange={(value) => onUpdate(index, 'copyrightShare', value)}
          min={0}
          max={100}
          step={10}
          className="h-10"
        />
      )
    },
    size: 65,
    enableResizing: false,
  },
  {
    accessorKey: "relatedRightsShare",
    header: () => (
      <div className="flex items-center gap-2">
        –°–º–µ–∂–Ω—ã–µ
        <Popover>
          <PopoverTrigger asChild>
            <button
              type="button"
              className="text-muted-foreground hover:text-foreground transition-colors p-0.5"
              aria-label="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ —Å–º–µ–∂–Ω—ã–º –ø—Ä–∞–≤–∞–º"
            >
              <HelpCircle className="h-3 w-3" />
            </button>
          </PopoverTrigger>
          <PopoverContent className="w-80" side="top">
            <div className="space-y-3">
              <div className="font-medium text-foreground">
                –î–æ–ª—è –≤ —Å–º–µ–∂–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö (Related Rights)
              </div>
              <div className="text-sm text-muted-foreground space-y-2">
                <p>
                  <strong>–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–æ:</strong> –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–ª—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –¥–æ—Ö–æ–¥–∞—Ö –æ—Ç —Ñ–æ–Ω–æ–≥—Ä–∞–º–º—ã (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤, –ø—Ä–∞–≤–∞ –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤).
                </p>
                <p>
                  <strong>–ú–æ–∂–Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å:</strong> –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å –æ —Ç–æ—á–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å–º–µ–∂–Ω—ã—Ö –ø—Ä–∞–≤.
                </p>
                <p className="text-xs text-muted-foreground/80">
                  üí° –°–º–µ–∂–Ω—ã–µ –ø—Ä–∞–≤–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –∏ –∏–º–µ—é—Ç —Å–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                </p>
              </div>
            </div>
          </PopoverContent>
        </Popover>
      </div>
    ),
    cell: ({ row, table }) => {
      const index = table.getRowModel().rows.findIndex(r => r.id === row.id)
      const participant = row.original

      return (
        <NumberInput
          placeholder="0"
          value={participant.relatedRightsShare || 0}
          onChange={(value) => onUpdate(index, 'relatedRightsShare', value)}
          min={0}
          max={100}
          step={10}
          className="h-10"
        />
      )
    },
    size: 65,
    enableResizing: false,
  },
  {
    id: "actions",
    header: "",
    cell: ({ row, table }) => {
      const index = table.getRowModel().rows.findIndex(r => r.id === row.id)
      const participant = row.original
      
      // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const allMainArtists = table.getRowModel().rows.filter(r => r.original.role === 'MainArtist')
      const isLastMainArtist = participant.role === 'MainArtist' && allMainArtists.length === 1

      const handleDelete = () => {
        if (!isLastMainArtist && index >= 0) {
          onRemove(index)
        }
      }

      return (
        <div className="flex justify-center">
          <Button
            size="icon"
            variant="ghost"
            onClick={handleDelete}
            disabled={isLastMainArtist || index < 0}
            className="h-8 w-8 text-muted-foreground hover:text-destructive hover:bg-destructive/10 disabled:opacity-30 disabled:cursor-not-allowed transition-colors"
            aria-label="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
            title={isLastMainArtist ? "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è" : "–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"}
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
      )
    },
    enableSorting: false,
    enableHiding: false,
    size: 60,
  },
]